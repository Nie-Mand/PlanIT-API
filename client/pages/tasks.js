import React, { useState } from "react";
import Head from "next/head";
import { v4 as uuid } from "uuid";
import List from "../components/tasks/list";
import store from "../utlis/store";
import StoreApi from "../utlis/storeApi";
import InputContainer from "../components/tasks/inputContainer";
import { makeStyles } from "@material-ui/core/styles";
import { DragDropContext, Droppable } from "react-beautiful-dnd";
import { useBoards } from "../utlis/hooks";

const useStyle = makeStyles((theme) => ({
  root: {
    minHeight: "100vh",
    background: "#D3CEFF",
    width: "100%",
    overflowY: "auto",
  },
  listContainer: {
    display: "flex",
  },
}));

export default function App() {
  const { boards, loading, createBoard, createTask } = useBoards();
  const [data, setData] = useState(store);

  const [backgroundUrl, setBackgroundUrl] = useState("");
  const classes = useStyle();

  const addMoreCard = async (title, listId) => {
    console.log("add more card");
    await createTask({ content: title, board: listId });
  };

  const addMoreList = async (title) => {
    console.log("addin more list as ", title);
    await createBoard({ title });
  };

  const updateListTitle = (title, listId) => {
    const list = data.lists[listId];
    list.title = title;

    const newState = {
      ...data,
      lists: {
        ...data.lists,
        [listId]: list,
      },
    };
    setData(newState);
  };

  const onDragEnd = (result) => {
    const { destination, source, draggableId, type } = result;
    console.log("destination", destination, "source", source, draggableId);

    if (!destination) {
      return;
    }
    if (type === "list") {
      const newListIds = data.listIds;
      newListIds.splice(source.index, 1);
      newListIds.splice(destination.index, 0, draggableId);
      return;
    }

    const sourceList = data.lists[source.droppableId];
    const destinationList = data.lists[destination.droppableId];
    const draggingCard = sourceList.cards.filter(
      (card) => card.id === draggableId
    )[0];

    if (source.droppableId === destination.droppableId) {
      sourceList.cards.splice(source.index, 1);
      destinationList.cards.splice(destination.index, 0, draggingCard);
      const newSate = {
        ...data,
        lists: {
          ...data.lists,
          [sourceList.id]: destinationList,
        },
      };
      setData(newSate);
    } else {
      sourceList.cards.splice(source.index, 1);
      destinationList.cards.splice(destination.index, 0, draggingCard);

      const newState = {
        ...data,
        lists: {
          ...data.lists,
          [sourceList.id]: sourceList,
          [destinationList.id]: destinationList,
        },
      };
      setData(newState);
    }
  };

  if (loading) return <div>Loading</div>;

  return (
    <div>
      {/* <Head>
                <title>Tasks | PlantIT</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head> */}

      <StoreApi.Provider value={{ addMoreCard, addMoreList, updateListTitle }}>
        <div
          className={classes.root}
          style={{
            backgroundImage: `url(${backgroundUrl})`,
            backgroundSize: "cover",
            backgroundRepeat: "no-repeat",
            paddingLeft: "256px",
          }}
        >
          <DragDropContext onDragEnd={onDragEnd}>
            <Droppable droppableId="app" type="list" direction="horizontal">
              {(provided) => (
                <div
                  className={classes.listContainer}
                  ref={provided.innerRef}
                  {...provided.droppableProps}
                >
                  {boards.map((board, idx) => (
                    <List list={board} key={board.id} index={idx} />
                  ))}
                  <InputContainer type="list" />
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
        </div>
      </StoreApi.Provider>
    </div>
  );
}
